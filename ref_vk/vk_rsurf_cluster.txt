// GL_RSURF.C: surface-related refresh code
#include "vk_local.h"
#include "vk_data.h"

static vec3_t	modelorg;		// relative to viewpoint

qboolean lightmap_updates_need_push;

surfacechain_t* r_alpha_surfaces;

#define		DYNAMIC_LIGHT_WIDTH  128
#define		DYNAMIC_LIGHT_HEIGHT 128

#define		LIGHTMAP_BYTES 4

#define		BLOCK_WIDTH		128
#define		BLOCK_HEIGHT	128

#define		MAX_LIGHTMAPS	128

image_t* lightmap_image;

typedef struct
{
	int internal_format;
	int	current_lightmap_texture;

	msurface_t* lightmap_surfaces[MAX_LIGHTMAPS];

	int			allocated[BLOCK_WIDTH];

	// the lightmap texture data needs to be kept in
	// main memory so texsubimage can update properly
	byte		lightmap_buffer[4 * BLOCK_WIDTH * BLOCK_HEIGHT];
} vklightmapstate_t;

vklightmapstate_t vk_lms;

int r_null_cluster_visframe;
int r_cluster_visframe[MAX_MAP_LEAFS];

void VK_CreateLightmapImage()
{
	lightmap_image = VK_CreatePic("***lightmap_image***", BLOCK_WIDTH, BLOCK_HEIGHT, MAX_LIGHTMAPS, VK_FORMAT_R8G8B8A8_UNORM, VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
	lightmap_image->locked = true;
	VK_ChangeSampler(lightmap_image, vk_state.device.linear_sampler);
}

void VK_DestroyLightmapImage()
{
	//VK_FreeImage(lightmap_image); //undone: freed when images are shut down
}

//Compare a texinfo independent of its projection vectors, and group it roughly by similarity. 
int Mod_CompareTexInfo(const mtexinfo_t* a, const mtexinfo_t* b)
{
	uint32_t aimgnum = a->image - &vktextures[0];
	uint32_t bimgnum = b->image - &vktextures[0];
	//This hash should contain all the relevant bits to allow sorting textures accurately.
	uint32_t ahash = aimgnum << 16 | (a->flags << 4) | a->numframes;
	uint32_t bhash = bimgnum << 16 | (b->flags << 4) | b->numframes;

	if (ahash == bhash)
		return 0;
	if (ahash < bhash)
		return -1;
	if (ahash > bhash)
		return 1;
}

//Used to sort leaf pointers by their cluster. 
int Mod_CompareLeaf(const void* a, const void* b)
{
	mleaf_t* leafa = *(mleaf_t**)a;
	mleaf_t* leafb = *(mleaf_t**)b;

	if (leafa->cluster < leafb->cluster)
		return -1;
	if (leafa->cluster > leafb->cluster)
		return 1;
	return 0;
}

//Sort function to sort surfaces by their texture and flags. 
//This doesn't need to be sorted in any particular order, just grouped together. 
int Mod_CompareMSurfacePtr(const void* a, const void* b)
{
	msurface_t* surfa = *(msurface_t**)a;
	msurface_t* surfb = *(msurface_t**)b;

	return Mod_CompareTexInfo(surfa->texinfo, surfb->texinfo);
}

void R_BeginLightmapUpdates()
{
	if (lightmap_updates_need_push)
		return;

	VK_StartStagingImageData(&vk_state.device.stage, lightmap_image);
	lightmap_updates_need_push = true;
}

void R_PushLightmapUpdates()
{
	if (lightmap_updates_need_push)
	{
		lightmap_updates_need_push = false;
		VK_FinishStagingImage(&vk_state.device.stage, lightmap_image);
	}
}

//modified from the gl version to emit to the vertex buffer. 
//ATM all vertices are just a massive triangle soup. The geometry will probably always be a triangle soup, but I may add an index buffer later for the sake of memory conservation. 
//Returns amount of vertices created.
int VK_BuildPolygonFromSurface(msurface_t* fa, bufferbuilder_t* buffer)
{
	int			lindex, lnumverts;
	medge_t* pedges, * r_pedge;
	int			vertpage;
	float* vec, *vec2, *vec3;
	float		s, t;
	worldvertex_t vert;

	//This will never change, so it can be initialized once
	vert.lightmap_layer = fa->lightmaptexturenum;

	// reconstruct the polygon
	pedges = currentmodel->edges;
	lnumverts = fa->numedges;
	vertpage = 0;

	//build the first triangle. 
	lindex = currentmodel->surfedges[fa->firstedge];

	//currently hijacking vert.lu for alpha information
	qboolean special = fa->texinfo->flags & (SURF_TRANS66 | SURF_TRANS33 | SURF_WARP) ? true : false;
	float alpha = 1.0f;
	if (fa->texinfo->flags & SURF_TRANS66)
		alpha = 2.0f / 3;
	else if (fa->texinfo->flags & SURF_TRANS33)
		alpha = 1.0f / 3;

	if (lindex > 0)
	{
		r_pedge = &pedges[lindex];
		vec = currentmodel->vertexes[r_pedge->v[0]].position;
		vec3 = currentmodel->vertexes[r_pedge->v[1]].position;
	}
	else
	{
		r_pedge = &pedges[-lindex];
		vec = currentmodel->vertexes[r_pedge->v[1]].position;
		vec3 = currentmodel->vertexes[r_pedge->v[0]].position;
	}


	lindex = currentmodel->surfedges[fa->firstedge + 1];
	if (lindex > 0)
	{
		r_pedge = &pedges[lindex];
		vec2 = currentmodel->vertexes[r_pedge->v[1]].position; //it's swapped in my quake 1 renderer...
	}
	else
	{
		r_pedge = &pedges[-lindex];
		vec2 = currentmodel->vertexes[r_pedge->v[0]].position;
	}

	VectorCopy(vec, vert.pos);
	vert.u = (DotProduct(vec, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3]) / fa->texinfo->image->width;
	vert.v =( DotProduct(vec, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3]) / fa->texinfo->image->height;
	vert.lu = (DotProduct(vec, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3] - fa->texturemins[0] + fa->light_s * 16 + 8) / (BLOCK_WIDTH * 16);
	vert.lv = (DotProduct(vec, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3] - fa->texturemins[1] + fa->light_t * 16 + 8) / (BLOCK_HEIGHT * 16);
	if (special)
		vert.lu = alpha;
	R_BufferBuilderPut(buffer, &vert, sizeof(vert));

	VectorCopy(vec2, vert.pos);
	vert.u = (DotProduct(vec2, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3]) / fa->texinfo->image->width;
	vert.v = (DotProduct(vec2, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3]) / fa->texinfo->image->height;
	vert.lu = (DotProduct(vec2, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3] - fa->texturemins[0] + fa->light_s * 16 + 8) / (BLOCK_WIDTH * 16);
	vert.lv = (DotProduct(vec2, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3] - fa->texturemins[1] + fa->light_t * 16 + 8) / (BLOCK_HEIGHT * 16);
	if (special)
		vert.lu = alpha;
	R_BufferBuilderPut(buffer, &vert, sizeof(vert));

	VectorCopy(vec3, vert.pos);
	vert.u = (DotProduct(vec3, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3]) / fa->texinfo->image->width;
	vert.v = (DotProduct(vec3, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3]) / fa->texinfo->image->height;
	vert.lu = (DotProduct(vec3, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3] - fa->texturemins[0] + fa->light_s * 16 + 8) / (BLOCK_WIDTH * 16);
	vert.lv = (DotProduct(vec3, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3] - fa->texturemins[1] + fa->light_t * 16 + 8) / (BLOCK_HEIGHT * 16);
	if (special)
		vert.lu = alpha;
	R_BufferBuilderPut(buffer, &vert, sizeof(vert));

	int num_verts_emitted = 3;

	for (int i = 2; i < fa->numedges - 1; i++)
	{
		lindex = currentmodel->surfedges[fa->firstedge + i];

		if (lindex > 0)
		{
			r_pedge = &pedges[lindex];
			vec2 = currentmodel->vertexes[r_pedge->v[0]].position;
			vec3 = currentmodel->vertexes[r_pedge->v[1]].position;
		}
		else
		{
			r_pedge = &pedges[-lindex];
			vec2 = currentmodel->vertexes[r_pedge->v[1]].position;
			vec3 = currentmodel->vertexes[r_pedge->v[0]].position;
		}

		VectorCopy(vec, vert.pos);
		vert.u = (DotProduct(vec, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3]) / fa->texinfo->image->width;
		vert.v = (DotProduct(vec, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3]) / fa->texinfo->image->height;
		vert.lu = (DotProduct(vec, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3] - fa->texturemins[0] + fa->light_s * 16 + 8) / (BLOCK_WIDTH * 16);
		vert.lv = (DotProduct(vec, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3] - fa->texturemins[1] + fa->light_t * 16 + 8) / (BLOCK_HEIGHT * 16);
		if (special)
			vert.lu = alpha;
		R_BufferBuilderPut(buffer, &vert, sizeof(vert));

		VectorCopy(vec3, vert.pos);
		vert.u = (DotProduct(vec3, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3]) / fa->texinfo->image->width;
		vert.v = (DotProduct(vec3, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3]) / fa->texinfo->image->height;
		vert.lu = (DotProduct(vec3, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3] - fa->texturemins[0] + fa->light_s * 16 + 8) / (BLOCK_WIDTH * 16);
		vert.lv = (DotProduct(vec3, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3] - fa->texturemins[1] + fa->light_t * 16 + 8) / (BLOCK_HEIGHT * 16);
		if (special)
			vert.lu = alpha;
		R_BufferBuilderPut(buffer, &vert, sizeof(vert));

		VectorCopy(vec2, vert.pos);
		vert.u = (DotProduct(vec2, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3]) / fa->texinfo->image->width;
		vert.v = (DotProduct(vec2, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3]) / fa->texinfo->image->height;
		vert.lu = (DotProduct(vec2, fa->texinfo->vecs[0]) + fa->texinfo->vecs[0][3] - fa->texturemins[0] + fa->light_s * 16 + 8) / (BLOCK_WIDTH * 16);
		vert.lv = (DotProduct(vec2, fa->texinfo->vecs[1]) + fa->texinfo->vecs[1][3] - fa->texturemins[1] + fa->light_t * 16 + 8) / (BLOCK_HEIGHT * 16);
		if (special)
			vert.lu = alpha;
		R_BufferBuilderPut(buffer, &vert, sizeof(vert));

		num_verts_emitted += 3;
	}

	return num_verts_emitted;
}

int R_SortAndBuildSurfaces(model_t* mod, int clusternum, int numverts, bufferbuilder_t* leafSurfaceBuffer, bufferbuilder_t* worldVertexBuffer, bufferbuilder_t* chainBuffer)
{
	mcluster_t* clusterp = &mod->clusters[clusternum];
	clusterp->numsurfacechains = 0;

	//Cluster with no normal faces?
	if (leafSurfaceBuffer->byteswritten == 0) 
		return numverts;

	int numsurfaces = leafSurfaceBuffer->byteswritten / sizeof(msurface_t*);
	//sort all the surfaces to group them 
	qsort(leafSurfaceBuffer->data, numsurfaces, sizeof(msurface_t*), &Mod_CompareMSurfacePtr);

	msurface_t** sortedsurfaces = (msurface_t**)leafSurfaceBuffer->data;
	//Iterate through the sorted data and build chains for each. 
	mtexinfo_t* lasttexture = sortedsurfaces[0]->texinfo;
	uint32_t lastflags = sortedsurfaces[0]->flags;
	int newnumverts = numverts;

	surfacechain_t chain =
	{
		.flags = lastflags,
		.texinfo = lasttexture,
		.offset = numverts
	};

	//Ew, this is an awful hack. Store the offset into the chain buffer which will later be added to the final pointer of the chain buffer. 
	clusterp->firstsurfacechain = (surfacechain_t*)chainBuffer->byteswritten;

	for (int j = 0; j < numsurfaces; j++)
	{
		msurface_t* surfacep = sortedsurfaces[j];

		if (Mod_CompareTexInfo(surfacep->texinfo, lasttexture))
		{
			clusterp->numsurfacechains++;
			R_BufferBuilderPut(chainBuffer, &chain, sizeof(chain));
			lastflags = chain.flags;
			lasttexture = chain.texinfo;

			chain.count = 0;
			chain.offset = newnumverts;
			chain.flags = surfacep->flags;
			chain.texinfo = surfacep->texinfo;
			chain.surfacelist = NULL;
		}

		int new_vert_count = VK_BuildPolygonFromSurface(surfacep, worldVertexBuffer);

		if (new_vert_count != 0)
		{
			surfacep->lightmapchain = chain.surfacelist;
			chain.surfacelist = surfacep;
		}
		chain.count += new_vert_count;
		newnumverts += new_vert_count;
	}

	if (chain.count > 0)
	{
		clusterp->numsurfacechains++;
		R_BufferBuilderPut(chainBuffer, &chain, sizeof(chain));
	}

	return newnumverts;
}

void R_RecursiveNodeAdd(mnode_t* node, bufferbuilder_t* leafClusterBuffer, int* highestclusternum)
{
	if (node->contents != -1)
	{
		mleaf_t* leaf = (mleaf_t*)node;
		if (leaf->cluster + 1 > *highestclusternum)
		{
			*highestclusternum = leaf->cluster + 1;
		}
		R_BufferBuilderPut(leafClusterBuffer, &leaf, sizeof(mleaf_t*));
	}
	else
	{
		R_RecursiveNodeAdd(node->children[0], leafClusterBuffer, highestclusternum);
		R_RecursiveNodeAdd(node->children[1], leafClusterBuffer, highestclusternum);
	}
}

void R_BuildSurfaces(model_t* mod)
{
	//Initialize the vertex buffer for this model. 
	//This is currently using a fixed stride of 32 bytes per vertex, to simplify construction, even though it wastes data on sky and warp faces. 
	bufferbuilder_t worldVertexBuffer;
	bufferbuilder_t leafSurfaceBuffer;
	bufferbuilder_t chainBuffer;
	bufferbuilder_t leafClusterBuffer;
	R_CreateBufferBuilder(&worldVertexBuffer, 8 * 1024 * 1024);
	R_CreateBufferBuilder(&leafSurfaceBuffer, 65536);
	R_CreateBufferBuilder(&chainBuffer, 65536);
	R_CreateBufferBuilder(&leafClusterBuffer, 65536);

	int numchains = 0;
	int numverts = 0;

#if 0
	for (int i = 0; i < mod->numleafs; i++)
	{
		leafSurfaceBuffer.byteswritten = 0;
		mleaf_t* leaf = &mod->leafs[i];

		//Keep the count accurate since it is important for updating leaves. 
		leaf->numsurfacechains = 0;

		if (leaf->nummarksurfaces == 0)
		{
			continue;
		}

		for (int j = 0; j < leaf->nummarksurfaces; j++)
		{
			R_BufferBuilderPut(&leafSurfaceBuffer, &leaf->firstmarksurface[j], sizeof(msurface_t*));
		}

		qsort(leafSurfaceBuffer.data, leaf->nummarksurfaces, sizeof(msurface_t*), &Mod_CompareMSurfacePtr);

		msurface_t** sortedsurfaces = (msurface_t**)leafSurfaceBuffer.data;
		//Iterate through the sorted data and build chains for each. 
		mtexinfo_t* lasttexture = sortedsurfaces[0]->texinfo;
		uint32_t lastflags = sortedsurfaces[0]->flags;

		surfacechain_t chain =
		{
			.flags = lastflags,
			.texinfo = lasttexture,
			.offset = numverts
		};

		//leaf->firstsurfacechain = &mod->chains[numchains];

		for (int j = 0; j < leaf->nummarksurfaces; j++)
		{
			msurface_t* surfacep = sortedsurfaces[j];

			//if (surfacep->texinfo != lasttexture)
			if (Mod_CompareTexInfo(surfacep->texinfo, lasttexture))
			{
				numchains++;
				leaf->numsurfacechains++;
				R_BufferBuilderPut(&chainBuffer, &chain, sizeof(chain));
				lastflags = chain.flags;
				lasttexture = chain.texinfo;

				chain.count = 0;
				chain.offset = numverts;
				chain.flags = surfacep->flags;
				chain.texinfo = surfacep->texinfo;
				chain.surfacelist = NULL;
			}

			int new_vert_count = VK_BuildPolygonFromSurface(surfacep, &worldVertexBuffer);

			if (new_vert_count != 0)
			{
				surfacep->lightmapchain = chain.surfacelist;
				chain.surfacelist = surfacep;
			}
			chain.count += new_vert_count;
			numverts += new_vert_count;
		}

		if (chain.count > 0)
		{
			leaf->numsurfacechains++;
			numchains++;
			R_BufferBuilderPut(&chainBuffer, &chain, sizeof(chain));
		}
	}

	mod->chains = (surfacechain_t*)chainBuffer.data; //this has to be here since if I do it earlier the pointer can jump about. 
	surfacechain_t* chainhack = mod->chains;
	//Have to set the pointers now since this now the pointer is set in stone
	for (int i = 0; i < mod->numleafs; i++)
	{
		mleaf_t* leaf = &mod->leafs[i];
		leaf->firstsurfacechain = chainhack;
		chainhack += leaf->numsurfacechains;
	}
#endif

	if (mod->numleafs > 0)
	{
		int highestclusternum = -1;
		//To group leaves by their cluster more easily, put all the leaves into a buffer and sort them
		/*for (int i = 0; i < mod->numleafs; i++)
		{
			mleaf_t* leaf = &mod->leafs[i];
			if ((leaf->cluster + 1) > highestclusternum)
				highestclusternum = leaf->cluster + 1;

			R_BufferBuilderPut(&leafClusterBuffer, &leaf, sizeof(&leaf));
		}
		
		int numleafs = mod->numleafs;
		qsort(leafClusterBuffer.data, mod->numleafs, sizeof(mleaf_t*), &Mod_CompareLeaf);*/

		mnode_t* node = mod->nodes;
		R_RecursiveNodeAdd(node, &leafClusterBuffer, &highestclusternum);

		int numleafs = leafClusterBuffer.byteswritten / sizeof(mleaf_t*);
		qsort(leafClusterBuffer.data, numleafs, sizeof(mleaf_t*), &Mod_CompareLeaf);

		mleaf_t** leafbuffer = (mleaf_t**)leafClusterBuffer.data;
		int lastclusternum = leafbuffer[0]->cluster + 1;

		mod->numclusters = highestclusternum + 1;
		mod->clusters = (mcluster_t*)malloc(sizeof(*mod->clusters) * mod->numclusters);
		if (!mod->clusters)
			ri.Sys_Error(ERR_FATAL, "R_BuildSurfaces: Failed to allocate model clusters");

		int numverts = 0;
		int clusternum;

		for (int i = 0; i < numleafs; i++)
		{
			mleaf_t* leaf = leafbuffer[i];
			clusternum = leaf->cluster + 1;

			if (clusternum != lastclusternum)
			{
				numverts = R_SortAndBuildSurfaces(mod, lastclusternum, numverts, &leafSurfaceBuffer, &worldVertexBuffer, &chainBuffer);
				leafSurfaceBuffer.byteswritten = 0;
				lastclusternum = clusternum;
			}

			//Add all the surfaces for this leaf into the leaf surface buffer
			for (int j = 0; j < leaf->nummarksurfaces; j++)
			{
				msurface_t* surf = leaf->firstmarksurface[j];

				//Don't add special faces during this step. 
				if (surf->flags & (SURF_SKY | SURF_TRANS33 | SURF_TRANS66 | SURF_WARP))
					continue; 

				//A surface can be shared by multiple leaves (hopefully in the same cluster....)
				if (surf->visframe == clusternum)
					continue;

				surf->visframe = clusternum;

				R_BufferBuilderPut(&leafSurfaceBuffer, &surf, sizeof(msurface_t*));
			}
		}

		if (leafSurfaceBuffer.byteswritten > 0)
		{
			numverts = R_SortAndBuildSurfaces(mod, clusternum, numverts, &leafSurfaceBuffer, &worldVertexBuffer, &chainBuffer);
		}
	}

	//For each cluster and leaf, calculate their respective pointers
	mod->chains = (surfacechain_t*)chainBuffer.data;
	surfacechain_t* chainhack = mod->chains;
	for (int i = 0; i < mod->numclusters; i++)
	{
		mcluster_t* clusterp = &mod->clusters[i];

		clusterp->firstsurfacechain = chainhack;
		chainhack += clusterp->numsurfacechains;
		//uint32_t chainoffset = (uint32_t)clusterp->firstsurfacechain;
		//clusterp->firstsurfacechain = (surfacechain_t*)(chainBuffer.data + chainoffset);
	}

	//Generate the vertex buffer for the level.

	VkBufferCreateInfo vertbufferinfo =
	{
		.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
		.sharingMode = VK_SHARING_MODE_EXCLUSIVE,
		.size = worldVertexBuffer.byteswritten,
		.usage = VK_BUFFER_USAGE_INDEX_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT
	};

	VK_CHECK(vkCreateBuffer(vk_state.device.handle, &vertbufferinfo, NULL, &mod->vertbuffer));

	VkMemoryRequirements reqs;
	vkGetBufferMemoryRequirements(vk_state.device.handle, mod->vertbuffer, &reqs);

	mod->vertbuffermem = VK_AllocateMemory(&vk_state.device.device_local_pool, reqs);
	vkBindBufferMemory(vk_state.device.handle, mod->vertbuffer, mod->vertbuffermem.memory, mod->vertbuffermem.offset);

	VK_StageBufferData(&vk_state.device.stage, mod->vertbuffer, worldVertexBuffer.data, 0, 0, worldVertexBuffer.byteswritten);
	VkCommandBuffer cmdbuffer = VK_GetStageCommandBuffer(&vk_state.device.stage); //do this after staging the data since the stage command may have flipped the buffer
	
	VkMemoryBarrier2 barrier =
	{
		.sType = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,
		.srcStageMask = VK_PIPELINE_STAGE_2_TRANSFER_BIT,
		.srcAccessMask = VK_ACCESS_2_TRANSFER_WRITE_BIT,
		.dstStageMask = VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT,
		.dstAccessMask = VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT | VK_ACCESS_2_INDEX_READ_BIT
	};

	VkDependencyInfo depinfo =
	{
		.sType = VK_STRUCTURE_TYPE_DEPENDENCY_INFO,
		.memoryBarrierCount = 1,
		.pMemoryBarriers = &barrier
	};

	vkCmdPipelineBarrier2(cmdbuffer, &depinfo);

	R_FreeBufferBuilder(&leafSurfaceBuffer);
	R_FreeBufferBuilder(&worldVertexBuffer);
}

//[ISB] ew
extern void R_SetCacheState(msurface_t* surf);
extern void R_BuildLightMap(msurface_t* surf, byte* dest, int stride);

static void R_CheckLightmapUpdate(msurface_t* surf)
{
	//Don't even bother if the surface is unlit.
	if (surf->texinfo->flags & (SURF_SKY | SURF_TRANS33 | SURF_TRANS66 | SURF_WARP))
		return;

	qboolean needs_update = false;
	qboolean dynamic = false;
	int map;
	for (map = 0; map < MAXLIGHTMAPS && surf->styles[map] != 255; map++)
	{
		if (r_newrefdef.lightstyles[surf->styles[map]].white != surf->cached_light[map])
		{
			needs_update = true;
			break;
		}
	}

	//Unlike the Quake 2 GL renderer, this needs to also account for the frame afterwards, to erase the dynamic light.
	//A downside of not being able to change vertex data on the fly, so I can't change the lightmap layer used. 
	//if (surf->dlightframe == r_framecount || surf->dlightframe == (r_framecount - 1))
	if (surf->dlightframe != 0)
	{
		needs_update = true;
		dynamic = true;
	}

	if (needs_update)
	{
		R_BeginLightmapUpdates();

		static unsigned	temp[128 * 128];
		int			smax, tmax;

		//if ((surf->styles[map] >= 32 || surf->styles[map] == 0) && (surf->dlightframe != r_framecount || surf->dlightframe != (r_framecount-1)))
		smax = (surf->extents[0] >> 4) + 1;
		tmax = (surf->extents[1] >> 4) + 1;

		//build the lightmap
		R_BuildLightMap(surf, (void*)temp, smax * 4);
		if (!dynamic && (surf->styles[map] >= 32 || surf->styles[map] == 0))
			R_SetCacheState(surf);

		//add the new lightmap to the image
		//VK_StageLayeredImageData(&vk_state.device.stage, lightmap_image, surf->lightmaptexturenum, BLOCK_WIDTH, BLOCK_HEIGHT, vk_lms.lightmap_buffer);
		VK_StageLayeredImageDataSub(&vk_state.device.stage, lightmap_image, surf->lightmaptexturenum, surf->light_s, surf->light_t, smax, tmax, temp);
		c_num_light_pushes++;

		//This is a bit hacky, but the surface needs to be updated later to erase the dynamic light. 
		if (dynamic && surf->dlightframe != r_framecount)
			surf->dlightframe = 0;
	}
}

extern VkCommandBuffer worldcmdbuffer;

/*
===============
R_TextureAnimation

Returns the proper texture for a given time and base texture
===============
*/
image_t* R_TextureAnimation(mtexinfo_t* tex)
{
	int		c;

	if (!tex->next)
		return tex->image;

	c = currententity->frame % tex->numframes;
	while (c)
	{
		tex = tex->next;
		c--;
	}

	return tex->image;
}

void R_DebugNodeWalk(mnode_t* node, uint32_t offset)
{
	if (!node) return;

	if (node->contents != -1)
	{
		//A leaf, convert to it
		mleaf_t* pleaf = (mleaf_t*)node;

		surfacechain_t* chaintest = pleaf->firstsurfacechain;
		for (int j = 0; j < pleaf->numsurfacechains; j++, chaintest++)
		{
			if (chaintest->texinfo->flags & (SURF_TRANS66 | SURF_TRANS33))
			{
				chaintest->chain = r_alpha_surfaces;
				r_alpha_surfaces = chaintest;
				continue;
			}

			if (chaintest->texinfo->flags & (SURF_SKY | SURF_TRANS33 | SURF_TRANS66 | SURF_WARP))
				continue;

			//Update any surfaces that need it. 
			msurface_t* updsurf = chaintest->surfacelist;
			while (updsurf)
			{
				R_CheckLightmapUpdate(updsurf);
				updsurf = updsurf->lightmapchain;
			}

			//Bind the image for this draw chain
			image_t* img = R_TextureAnimation(chaintest->texinfo);
			vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bmodel_pipeline_layout, 1, 1, &img->descriptor.set, 0, NULL);
			vkCmdDraw(worldcmdbuffer, chaintest->count, 1, chaintest->offset, 0);

			c_brush_polys++;
		}

		return;
	}

	R_DebugNodeWalk(node->children[0], offset);
	R_DebugNodeWalk(node->children[1], offset);
}

extern vkdescriptorset_t persp_descriptor_set;

/*
=================
R_DrawBrushModel
=================
*/
void R_DrawBrushModel(entity_t* e)
{
	if (currentmodel->nummodelsurfaces == 0)
		return;

	currententity = e;

	vec3_t		mins, maxs;
	qboolean	rotated;

	if (e->angles[0] || e->angles[1] || e->angles[2])
	{
		rotated = true;
		for (int i = 0; i < 3; i++)
		{
			mins[i] = e->origin[i] - currentmodel->radius;
			maxs[i] = e->origin[i] + currentmodel->radius;
		}
	}
	else
	{
		rotated = false;
		VectorAdd(e->origin, currentmodel->mins, mins);
		VectorAdd(e->origin, currentmodel->maxs, maxs);
	}

	if (R_CullBox(mins, maxs))
		return;

	// calculate dynamic lighting for bmodel
	if (!vk_dynamiclightmode->value != 2)
	{
		dlight_t* lt = r_newrefdef.dlights;
		for (int k = 0; k < r_newrefdef.num_dlights; k++, lt++)
		{
			R_MarkLights(lt, 1 << k, currentmodel->nodes + currentmodel->firstnode);
		}
	}

	entitymodelview_t modelview;
	uint32_t bufferoffset = R_RotateForEntity(e, &modelview);

	float modulate = vk_modulate->value;

	vkCmdBindPipeline(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, vk_state.device.brush_lightmap);
	vkCmdPushConstants(worldcmdbuffer, bmodel_pipeline_layout, VK_SHADER_STAGE_FRAGMENT_BIT, 0, sizeof(modulate), &modulate);
	vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bmodel_pipeline_layout, 0, 1, &persp_descriptor_set.set, 0, NULL);
	vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bmodel_pipeline_layout, 2, 1, &lightmap_image->descriptor.set, 0, NULL);
	vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bmodel_pipeline_layout, 3, 1, &modelview_descriptor.set, 1, &bufferoffset);

	R_DebugNodeWalk(&r_worldmodel->nodes[currentmodel->firstnode], bufferoffset);
}

/*
================
R_DrawAlphaSurfaces

Draw water surfaces and windows.
The BSP tree is waled front to back, so unwinding the chain
of alpha_surfaces will draw back to front, giving proper ordering.
================
*/
void R_DrawAlphaSurfaces(void)
{
	vkCmdBindPipeline(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, vk_state.device.brush_unlit);
	vkCmdPushConstants(worldcmdbuffer, bmodel_pipeline_layout, VK_SHADER_STAGE_FRAGMENT_BIT, 0, sizeof(float), &vk_state.inverse_intensity);
	vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bmodel_pipeline_layout, 0, 1, &persp_descriptor_set.set, 0, NULL);
	//vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bmodel_pipeline_layout, 2, 1, &lightmap_image->descriptor.set, 0, NULL);

	for (surfacechain_t* chain = r_alpha_surfaces; chain; chain = chain->chain)
	{
		//two rebinds per chain? ew
		vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, world_pipeline_layout, 1, 1, &chain->texinfo->image->descriptor.set, 0, NULL);

		//This replicates the context the chain was added in, since it can be part of a moved bmodel. 
		vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, bmodel_pipeline_layout, 3, 1, &modelview_descriptor.set, 1, &chain->modelview_offset);
		vkCmdDraw(worldcmdbuffer, chain->count, 1, chain->offset, 0);

		c_brush_polys++;
	}

	r_alpha_surfaces = NULL;
}

/*
================
R_RecursiveWorldNode
================
*/
void R_RecursiveWorldNode(mnode_t* node)
{
	int			c, side, sidebit;
	cplane_t* plane;
	msurface_t* surf, ** mark;
	mleaf_t* pleaf;
	float		dot;
	image_t* image;

	if (node->contents == CONTENTS_SOLID)
		return;		// solid

	if (node->visframe != r_visframecount)
		return;

	//Cull the face if outside the view frustrum
	if (R_CullBox(node->minmaxs, node->minmaxs + 3))
		return;

	//if a leaf node, draw stuff
	if (node->contents != -1)
	{
		//A leaf, convert to it
		pleaf = (mleaf_t*)node;

		// check for door connected areas
		if (r_newrefdef.areabits)
		{
			if (!(r_newrefdef.areabits[pleaf->area >> 3] & (1 << (pleaf->area & 7))))
				return;		// not visible
		}

		//surface to mark
		mark = pleaf->firstmarksurface;
		//number of surfaces to mark
		c = pleaf->nummarksurfaces;

		//do we have any surfaces to mark?
		if (c)
		{
			do
			{
				//As I've learned, a surf can exist in multiple leaves apparently, so we need to mark them here
				//but don't allow a surface to get their lightmap updated twice. 
				if ((*mark)->visframe != r_framecount)
				{
					//mark them by setting visframe to the current framecount. This indicates that they are to be drawn
					(*mark)->visframe = r_framecount;
					R_CheckLightmapUpdate(*mark);
				}
				mark++;
			} while (--c);
		}

		if (pleaf->visframe != r_visframecount)
			return;

		if (R_CullBox(pleaf->minmaxs, pleaf->minmaxs + 3))
			return;

		int clusternum = pleaf->cluster + 1;
		mcluster_t* cluster = &currentmodel->clusters[clusternum];

		//Ensure that a cluster is only rendered once. 
		if (cluster->visframe != r_framecount)
		{
			cluster->visframe = r_framecount;

			surfacechain_t* chaintest = cluster->firstsurfacechain;
			for (int j = 0; j < cluster->numsurfacechains; j++, chaintest++)
			{
				if (chaintest->texinfo->flags & (SURF_TRANS66 | SURF_TRANS33))
				{
					chaintest->chain = r_alpha_surfaces;
					chaintest->modelview_offset = 0; //buffer offset is always 0 for worldmodel. 
					r_alpha_surfaces = chaintest;
					continue;
				}

				if (chaintest->texinfo->flags & (SURF_SKY | SURF_TRANS33 | SURF_TRANS66 | SURF_WARP))
					continue;

				//Bind the image for this draw chain
				vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, world_pipeline_layout, 1, 1, &chaintest->texinfo->image->descriptor.set, 0, NULL);
				vkCmdDraw(worldcmdbuffer, chaintest->count, 1, chaintest->offset, 0);

				c_brush_polys++;
			}
		}

		/*surfacechain_t* chaintest = pleaf->firstsurfacechain;
		for (int j = 0; j < pleaf->numsurfacechains; j++, chaintest++)
		{
			if (chaintest->texinfo->flags & (SURF_TRANS66 | SURF_TRANS33))
			{
				chaintest->chain = r_alpha_surfaces;
				chaintest->modelview_offset = 0; //buffer offset is always 0 for worldmodel. 
				r_alpha_surfaces = chaintest;
				continue;
			}

			if (chaintest->texinfo->flags & (SURF_SKY | SURF_TRANS33 | SURF_TRANS66 | SURF_WARP))
				continue;

			//Update any surfaces that need it. 
			msurface_t* updsurf = chaintest->surfacelist;

			//Bind the image for this draw chain
			vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, world_pipeline_layout, 1, 1, &chaintest->texinfo->image->descriptor.set, 0, NULL);
			vkCmdDraw(worldcmdbuffer, chaintest->count, 1, chaintest->offset, 0);

			c_brush_polys++;
		}*/

		return;
	}

	// node is just a decision point, so go down the apropriate sides

	// find which side of the node we are on
	plane = node->plane;

	switch (plane->type)
	{
	case PLANE_X:
		dot = modelorg[0] - plane->dist;
		break;
	case PLANE_Y:
		dot = modelorg[1] - plane->dist;
		break;
	case PLANE_Z:
		dot = modelorg[2] - plane->dist;
		break;
	default:
		dot = DotProduct(modelorg, plane->normal) - plane->dist;
		break;
	}

	if (dot >= 0)
	{
		side = 0;
		sidebit = 0;
	}
	else
	{
		side = 1;
		sidebit = SURF_PLANEBACK;
	}

	// recurse down the children, front side first
	R_RecursiveWorldNode(node->children[side]);

	// draw stuff
	/*for (c = node->numsurfaces, surf = r_worldmodel->surfaces + node->firstsurface; c; c--, surf++)
	{
		//if not marked, skip it
		if (surf->visframe != r_framecount)
			continue;

		//cull backfaces
		if ((surf->flags & SURF_PLANEBACK) != sidebit)
			continue;		// wrong side

		//sky surface, mark as such and drop
		if (surf->texinfo->flags & SURF_SKY)
		{	// just adds to visible sky bounds
			R_AddSkySurface(surf);
		}
		//transparent texture, to be rendered later
		else if (surf->texinfo->flags & (SURF_TRANS33 | SURF_TRANS66))
		{	// add to the translucent chain
			surf->texturechain = r_alpha_surfaces;
			r_alpha_surfaces = surf;
		}
		//Normal surface
		else
		{
			//Normal face, if multitexturing is enabled, draw right here
			if (qglMTexCoord2fSGIS && !(surf->flags & SURF_DRAWTURB))
			{
				GL_RenderLightmappedPoly(surf);
			}
			//Multitexturing not enabled, or warped surface, mark for later. 
			else
			{
				// the polygon is visible, so add it to the texture
				// sorted chain
				// FIXME: this is a hack for animation
				image = R_TextureAnimation(surf->texinfo);
				surf->texturechain = image->texturechain;
				image->texturechain = surf;
			}
		}
	}*/

	// recurse down the back side
	R_RecursiveWorldNode(node->children[!side]);
}

/*
=============
R_DrawWorld
=============
*/
void R_DrawWorld(void)
{
	r_alpha_surfaces = NULL;

	currentmodel = r_worldmodel;

	if (vk_lightmap->value)
		vkCmdBindPipeline(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, vk_state.device.world_lightmap_only);
	else if (vk_lightmode->value)
		vkCmdBindPipeline(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, vk_state.device.world_lightmap_unclamped);
	else
		vkCmdBindPipeline(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, vk_state.device.world_lightmap);
	float modulate = vk_modulate->value;

	vkCmdPushConstants(worldcmdbuffer, world_pipeline_layout, VK_SHADER_STAGE_FRAGMENT_BIT, 0, sizeof(modulate), &modulate);

	vkCmdBindDescriptorSets(worldcmdbuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, world_pipeline_layout, 2, 1, &lightmap_image->descriptor.set, 0, NULL);
	VkDeviceSize candobetter = 0;
	vkCmdBindVertexBuffers(worldcmdbuffer, 0, 1, &currentmodel->vertbuffer, &candobetter);

	R_RecursiveWorldNode(r_worldmodel->nodes);

	//DEBUG
	/*extern model_t	mod_inline[];

	for (int i = 1; i < r_worldmodel->numsubmodels; i++)
	{
		model_t* hackmod = &mod_inline[i];

		if (hackmod->firstnode < 0)
			continue;

		R_DebugNodeWalk(&r_worldmodel->nodes[hackmod->firstnode]);
	}*/
}

/*
===============
R_MarkLeaves

Mark the leaves and nodes that are in the PVS for the current
cluster
===============
*/
void R_MarkLeaves(void)
{
	byte* vis;
	byte	fatvis[MAX_MAP_LEAFS / 8];
	//renamed lleaf (local leaf) to remind that the actual data content is just a leaf
	mnode_t* lleaf;
	int		i, c;
	mleaf_t* leaf;
	int		cluster;

	if (r_oldviewcluster == r_viewcluster && r_oldviewcluster2 == r_viewcluster2 && !r_novis->value && r_viewcluster != -1)
		return;

	// development aid to let you run around and see exactly where
	// the pvs ends
	if (vk_lockpvs->value)
		return;

	r_visframecount++;
	r_oldviewcluster = r_viewcluster;
	r_oldviewcluster2 = r_viewcluster2;

	//if novis is enabled, mark everything
	if (r_novis->value || r_viewcluster == -1 || !r_worldmodel->vis)
	{
		// mark everything
		for (i = 0; i < r_worldmodel->numleafs; i++)
			r_worldmodel->leafs[i].visframe = r_visframecount;
		for (i = 0; i < r_worldmodel->numnodes; i++)
			r_worldmodel->nodes[i].visframe = r_visframecount;
		return;
	}

	vis = Mod_ClusterPVS(r_viewcluster, r_worldmodel);
	// may have to combine two clusters because of solid water boundaries
	if (r_viewcluster2 != r_viewcluster)
	{
		memcpy(fatvis, vis, (r_worldmodel->numleafs + 7) / 8);
		vis = Mod_ClusterPVS(r_viewcluster2, r_worldmodel);
		c = (r_worldmodel->numleafs + 31) / 32;
		for (i = 0; i < c; i++)
			((int*)fatvis)[i] |= ((int*)vis)[i];
		vis = fatvis;
	}

	//run through and mark all leaves
	for (i = 0, leaf = r_worldmodel->leafs; i < r_worldmodel->numleafs; i++, leaf++)
	{
		cluster = leaf->cluster;
		if (cluster == -1)
			continue;
		//if (cluster == r_viewcluster)
		//	current_viewleaf = leaf;

		if (vis[cluster >> 3] & (1 << (cluster & 7)))
		//if (leaf == current_viewleaf)
		//if (leaf->cluster == r_viewcluster)
		{
			//cast to node here so we can iterate through each leaf's parents. 
			lleaf = (mnode_t*)leaf;
			do
			{
				//already visible
				if (lleaf->visframe == r_visframecount)
					break;
				//set visible
				lleaf->visframe = r_visframecount;
				lleaf = lleaf->parent;
			} while (lleaf);
		}
	}
}

/*
=============================================================================

  LIGHTMAP ALLOCATION

=============================================================================
*/

static void LM_InitBlock(void)
{
	memset(vk_lms.allocated, 0, sizeof(vk_lms.allocated));
}

static void LM_UploadBlock(qboolean dynamic)
{
	int texture;
	int height = 0;

	if (dynamic)
	{
		texture = 0;
	}
	else
	{
		texture = vk_lms.current_lightmap_texture;
	}

	//GL_Bind(gl_state.lightmap_textures + texture);
	//qglTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	//qglTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	if (dynamic)
	{
		int i;

		for (i = 0; i < BLOCK_WIDTH; i++)
		{
			if (vk_lms.allocated[i] > height)
				height = vk_lms.allocated[i];
		}

		//I swear to god you better have initialized a transfer in the stage. 

		/*qglTexSubImage2D(GL_TEXTURE_2D,
			0,
			0, 0,
			BLOCK_WIDTH, height,
			GL_LIGHTMAP_FORMAT,
			GL_UNSIGNED_BYTE,
			gl_lms.lightmap_buffer);*/
	}
	else
	{
		//I swear to god you better have initialized a transfer in the stage.
		VK_StageLayeredImageData(&vk_state.device.stage, lightmap_image, texture, BLOCK_WIDTH, BLOCK_HEIGHT, vk_lms.lightmap_buffer);
		/*qglTexImage2D(GL_TEXTURE_2D,
			0,
			gl_lms.internal_format,
			BLOCK_WIDTH, BLOCK_HEIGHT,
			0,
			GL_LIGHTMAP_FORMAT,
			GL_UNSIGNED_BYTE,
			gl_lms.lightmap_buffer);*/

		if (++vk_lms.current_lightmap_texture == MAX_LIGHTMAPS)
			ri.Sys_Error(ERR_DROP, "LM_UploadBlock() - MAX_LIGHTMAPS exceeded\n");
	}
}

// returns a texture number and the position inside it
static qboolean LM_AllocBlock(int w, int h, int* x, int* y)
{
	int		i, j;
	int		best, best2;

	best = BLOCK_HEIGHT;

	for (i = 0; i < BLOCK_WIDTH - w; i++)
	{
		best2 = 0;

		for (j = 0; j < w; j++)
		{
			if (vk_lms.allocated[i + j] >= best)
				break;
			if (vk_lms.allocated[i + j] > best2)
				best2 = vk_lms.allocated[i + j];
		}
		if (j == w)
		{	// this is a valid spot
			*x = i;
			*y = best = best2;
		}
	}

	if (best + h > BLOCK_HEIGHT)
		return false;

	for (i = 0; i < w; i++)
		vk_lms.allocated[*x + i] = best + h;

	return true;
}

/*
========================
GL_CreateSurfaceLightmap
========================
*/
void VK_CreateSurfaceLightmap(msurface_t* surf)
{
	int		smax, tmax;
	byte* base;

	if (surf->flags & (SURF_DRAWSKY | SURF_DRAWTURB))
		return;

	smax = (surf->extents[0] >> 4) + 1;
	tmax = (surf->extents[1] >> 4) + 1;

	if (!LM_AllocBlock(smax, tmax, &surf->light_s, &surf->light_t))
	{
		LM_UploadBlock(false);
		LM_InitBlock();
		if (!LM_AllocBlock(smax, tmax, &surf->light_s, &surf->light_t))
		{
			ri.Sys_Error(ERR_FATAL, "Consecutive calls to LM_AllocBlock(%d,%d) failed\n", smax, tmax);
		}
	}

	surf->lightmaptexturenum = vk_lms.current_lightmap_texture;

	base = vk_lms.lightmap_buffer;
	base += (surf->light_t * BLOCK_WIDTH + surf->light_s) * LIGHTMAP_BYTES;

	R_SetCacheState(surf);
	R_BuildLightMap(surf, base, BLOCK_WIDTH * LIGHTMAP_BYTES);
}

/*
==================
GL_BeginBuildingLightmaps

==================
*/
void VK_BeginBuildingLightmaps(model_t* m)
{
	static lightstyle_t	lightstyles[MAX_LIGHTSTYLES];

	memset(vk_lms.allocated, 0, sizeof(vk_lms.allocated));

	r_framecount = 1;		// no dlightcache


	/*
	** setup the base lightstyles so the lightmaps won't have to be regenerated
	** the first time they're seen
	*/
	for (int i = 0; i < MAX_LIGHTSTYLES; i++)
	{
		lightstyles[i].rgb[0] = 1;
		lightstyles[i].rgb[1] = 1;
		lightstyles[i].rgb[2] = 1;
		lightstyles[i].white = 3;
	}
	r_newrefdef.lightstyles = lightstyles;

	vk_state.lightmap_textures = 0; //[ISB] ref_vk doesn't need to reserve a texture for dynamic lights. 
	vk_lms.current_lightmap_texture = 0;

	VK_StartStagingImageData(&vk_state.device.stage, lightmap_image);
}

/*
=======================
GL_EndBuildingLightmaps
=======================
*/
void VK_EndBuildingLightmaps(void)
{
	LM_UploadBlock(false);

	VK_FinishStagingImage(&vk_state.device.stage, lightmap_image);
}

